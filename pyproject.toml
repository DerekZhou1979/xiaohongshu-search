[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "xiaohongshu-search"
version = "1.0.0"
authors = [
    {name = "Derek Zhou", email = "derekzhou1979@gmail.com"}
]
description = "一个功能强大的小红书笔记搜索和访问工具，支持智能排序、双重访问方式和自动认证"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Indexing",
    "Framework :: Flask",
    "Environment :: Web Environment",
    "Natural Language :: Chinese (Simplified)",
]
keywords = [
    "xiaohongshu",
    "小红书", 
    "search",
    "搜索",
    "web-scraping",
    "flask",
    "selenium",
    "crawler",
    "爬虫",
    "social-media",
    "content-analysis"
]
dependencies = [
    "Flask==3.0.0",
    "Flask-CORS==4.0.0",
    "selenium==4.15.2",
    "requests==2.31.0",
    "beautifulsoup4==4.12.2",
    "lxml==4.9.3",
    "urllib3==2.0.7",
    "webdriver-manager==4.0.1",
    "Pillow==10.1.0",
    "python-dotenv==1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0"
]

[project.urls]
Homepage = "https://github.com/DerekZhou1979/xiaohongshu-search"
Repository = "https://github.com/DerekZhou1979/xiaohongshu-search.git"
"Bug Reports" = "https://github.com/DerekZhou1979/xiaohongshu-search/issues"
Documentation = "https://github.com/DerekZhou1979/xiaohongshu-search#readme"
Changelog = "https://github.com/DerekZhou1979/xiaohongshu-search/releases"

[project.scripts]
xiaohongshu-search = "app:main"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]
"static" = ["*"]
"templates" = ["*.html"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ['E203', 'W503']
exclude = ['.git', '__pycache__', 'build', 'dist', '.eggs', '*.egg-info', '.venv']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
] 